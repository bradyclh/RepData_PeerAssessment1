set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f*x + rnorm(100, sd=0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
f
y
xyplot(y ~ x|f, layout= c(2,1))
?seed
?set.seed
xyplot(y~x|f, panel = function(x, y, ...){})
xyplot(y~x|f, panel = function(x, y, ...){panel.xyplot(x, y, ...) panel.abline(h=median(y), lty=2)})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
}, layout= c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.lmline(x, y, col = 2) ## Add a horizontal line at the median
}, layout= c(2,1))
?xyplot
library(ggplot2)
str(mpg)
gplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg, color=drv)
?qplot
qplot(displ, hwy, data =mpg, geom=c("point", "smooth"))
qplot(displ, hwy, data =mpg, geom=c("point"))
qplot(displ, hwy, data =mpg, geom=c(smooth"))
qplot(displ, hwy, data =mpg, geom=c("smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=5)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=5)
qplot(hwy, data=mpg, facets=drv~.)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
str(maacs)
load("D:/Brady/coursera/Exploratory Data Analysis/maacs.Rda")
View(maacs)
str(maacs)
qplot(log(eno), data=maacs)
qplot(log(eno), data=maacs, binwidth=2)
qplot(log(eno), data=maacs, binwidth=5)
qplot(log(eno), data=maacs, binwidth=30)
qplot(log(eno), data=maacs)
qplot(log(eno), data=maacs, binwidth=0.1)
qplot(log(eno), data=maacs, fill=mopos)
View(maacs)
qplot(log(eno), data=maacs, geom="density")
qplot(log(eno), data=maacs, geom="density", color=mopos)
qplot(log(pm25),    log(eno),	data	=
maacs,	shape	=	mopos)
qplot(log(pm25),    log(eno),	data	=
maacs,	color	=	mopos)
qplot(log(pm25),    log(eno),	data	=
maacs,	color	=	mopos, geom=c("point", "smooth"), method="lm")
qplot(log(pm25),    log(eno),	data	=
maacs,	color	=	mopos, geom=c("point", "smooth"), method="lm", facets = .~mopos)
qplot(logpm25, NocturnalSympt, data = maacs, facets = . ~ bmicat, geom =
c("point", "smooth"), method = "lm”)
head(maacs)
View(maacs)
View(maacs)
?ggplot
ggplot(maacs, aes(eno, pm25))
ggplot(maacs, aes(eno, pm25)) + geom_point()
ggplot(maacs, aes(log(eno), log(pm25)) + geom_point()
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point()
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point() + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point() + facet_grid(.~mopos) + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(color="steelblue", size=4, alpha=1/2) + facet_grid(.~mopos) + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(color= mopos, size=4, alpha=1/2) + facet_grid(.~mopos) + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + facet_grid(.~mopos) + geom_smooth(method="lm")
?labs
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x = expression("log " * PM[2.5]), y = "log ENO")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + facet_grid(.~mopos) + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5])) + facet_grid(.~mopos) + geom_smooth(method="lm")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5]))
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5])) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
?geom_smooth
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5])) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE) + theme_bw(base_family="Times")
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5])) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE) + theme_bw(base_family="Times") + facet_grid(.~mopos)
testdat <- data.frame(x=1:100, y=rnorm(100))
testdat[50,2] <- 100
View(testdat)
plot(testdat$x, testdat$y, type="l", ylim = c(-3,3))
?plot
g <- ggplot(testdat, aes(x=x, y=y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim(-3, 3))
g + geom_line() + coord_cartesian(ylim=c(-3, 3))
?seq
seq(0, 1, length = 11)
seq(0, 1, length = 10)
ggplot(maacs, aes(log(eno), log(pm25))) + geom_point(aes(color= mopos), size=4, alpha=1/2) + labs(title = "MAACS Cohort") + labs(x="log eno", y=expression("log "* PM[2.5])) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE) + theme_bw(base_family="Times") + facet_grid(.~mopos)
cutpoints <- quantile(maacs$pm25, seq(0, 1, length=11), na.rm=TRUE)
cutpoints
maacs$pm252dec <- cut(maacs$pm25, cutpoints)
View(maacs)
levels(maacs$pm252dec)
g <- ggplot(maacs, aes(log(eno), log(pm25)))
g
g + geom_point()
g + geom_point(alpha=1/3)
g + geom_point(alpha=1/3)
g + geom_point(alpha=1/3) +
facet_wrap(mopos ~ pm252dec, nrow = 2, ncol-4) +
geom_smooth(method="lm", se=FALSE, col="steelblue") +
theme_bw(base_family="Avenir", base_size=10) +
labs(x="log eno") +
labs(y=expression("log ") * PM[2.5]) +
labs(title = "MAACS Cohort")
g + geom_point(alpha=1/3)
+ facet_wrap(mopos ~ pm252dec, nrow = 2, ncol-4)
+ geom_smooth(method="lm", se=FALSE, col="steelblue")
+ theme_bw(base_family="Avenir", base_size=10)
+ labs(x="log eno")
+ labs(y=expression("log ") * PM[2.5])
+ labs(title = "MAACS Cohort")
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow=4, ncol=2)
g + geom_point(alpha=1/3) + facet_wrap(pm252dec, nrow=4, ncol=2)
g + geom_point(alpha=1/3)
g + geom_point(alpha=1/3) + facet_wrap(pm252dec, nrow=2, ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(pm252dec)
?facet_wrap
g + geom_point(alpha=1/3) + facet_grid(pm252dec)
g + geom_point(alpha=1/3) + facet_grid(.pm252dec~)
g + geom_point(alpha=1/3) + facet_grid(.~pm252dec)
g + geom_point(alpha=1/3) + facet_grid(.~pm252dec, nrow = 2, ncol=2)
g + geom_point(alpha=1/3) + facet_wrap(.~pm252dec, nrow = 2, ncol=2)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = 2, ncol=2)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = 2, ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = 2, ncol=5)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = 2, ncol=6)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(pm252dec, nrow = , ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(pm252dec, nrow = , ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4) + geom_smooth(method="lm", se=FALSE, col="Steelblue")
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4) + geom_smooth(method="lm", se=FALSE, col="Steelblue") + theme_bw(base_family="Avenir", base_size=10)
g + geom_point(alpha=1/3) + facet_wrap(mopos~pm252dec, nrow = , ncol=4) + geom_smooth(method="lm", se=FALSE, col="Steelblue") + theme_bw(base_family="Avenir", base_size=10) + labs(x="log eno") + labs(y=expression("log" * PM[2.5])) + labs(title="MAACS Cohort")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?rnorm
?plot
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
View(dataFrame)
View(dataFrame)
dist(dataFrame)
?dist
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
?kmeans
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
?cex
??cex
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 3)
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 1)
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
points(kmeansObj$centers, col = 1:2, pch = 3, cex = 3, lwd = 3)
points(kmeansObj$centers, col = 1:2, pch = 3, cex = 3, lwd = 3)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
?points
?hclust
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
?image
?t
t2 <- t(dataMatrix)
View(`t2`)
View(dataMatrix)
?yaxt
??yaxt
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, order(kmeansObj$cluster)])
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
View(dataMatrix)
?image
?matrix
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
dataMatrix[1, ]
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
View(dataMatrix)
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
?heatmap
?dist
hh <- hclust(dist(dataMatrix))
?hclust
hh$order
dataMatrixOrdered <- dataMatrix[hh$order, ]
View(dataMatrixOrdered)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
nrow(dataMatrixOrdered):1
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained",
pch = 19)
par(mar = c(1, 1, 1, 1))
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained",
pch = 19)
?SCALE
?scale
scale(dataMatrixOrdered)
View(dataMatrixOrdered)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1",
ylab = "Right Singular Vector 1")
abline(c(0, 1))
library(quantmod)
getSymbols("AAPL")
AAPL
chartSeries(AAPL)
chartSeries(AAPL["2012-01::2012-06"],theme="white")
getSymbols("2330.tw")
2330.tw
View(`2330.TW`)
chartSeries("2330.tw")
chartSeries("2330.TW")
chartSeries(2330.TW)
chartSeries(2330.TW)
chartSeries('2330.TW')
chartSeries(2330.TW)
2330 <- 2330.TW
View(`2330.TW`)
View(`2330.TW`)
View(`2330.TW`)
getSymbols("2330.TW")
library(quantmod)
getSymbols("2330.TW")
View(`2330.TW`)
chartSeries(2330.TW)
chartSeries(2330\.TW)
chartSeries('2330.TW')
str(2330.TW)
str("2330.TW")
str('2330.TW')
head(2330.TW)
2330 <- getSymbols("2330.TW")
2330 <- getSymbols("2330.TW", src="yahoo")
2330 <- getSymbols("2330.TW", src="yahoo", auto.assign=FALSE)
?getSymbols
setSymbolLookup(tsmc=list(src='yahoo', name="2330.TW"))
tsmc
getSymbols(tsmc)
?setSymbolLookup
setSymbolLookup(HSBC=list(src='yahoo', name="0005.HK"))
getSymbols("HSBC")
View(HSBC)
getSymbols("tsmc")
View(TSMC)
chartSeries(TSMC)
chartSeries(TSMC["2014-06::2014-12"],theme="white")
ma_20<-runMean(TSMC[,4],n=20)
ma_60<-runMean(TSMC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
position<-Lag(ifelse(ma_20>ma_60, 1,0))
return<-ROC(Cl(AAPL))*position
View(return)
return<-ROC(Cl(TSMC))*position
View(return)
return<-return['2014-06-30/2014-12-20']
View(return)
return<-exp(cumsum(return))
View(return)
plot(return)
chartSeries(TSMC)
chartSeries(TSMC["2014-06::2014-12"], theme="white")
addBBands()
addBBands(draw="p")
setSymbolLookup(TC=list(src='yahoo', name="1101.TW"))
chartSeries(TC["2014-06::2014-12"], theme="white")
getSymbols("TC")
chartSeries(TC["2014-06::2014-12"], theme="white")
addBBands()
addBBands(draw="p")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
chartSeries(TC["2014-06::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
chartSeries(TC["2014-01::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
chartSeries(TC["2012-01::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
chartSeries(TC["2013-01::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
setSymbolLookup(2433=list(src='yahoo', name="2433.TW"))
setSymbolLookup(HS=list(src='yahoo', name="2433.TW"))
getSymbole("HS")
getSymbols("HS")
chartSeries(HS["2014-01::2014-12"], theme="white")
chartSeries(HS["2013-01::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
setSymbolLookup(GST=list(src='yahoo', name="3559.TW"))
getSymbols("GST")
chartSeries(GST["2013-01::2014-12"], theme="white")
ma_20<-runMean(TC[,4],n=20)
ma_60<-runMean(TC[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
ma_20<-runMean(GST[,4],n=20)
ma_60<-runMean(GST[,4],n=60)
addTA(ma_20,on=1,col="blue")
addTA(ma_60,on=1,col="red")
setSymbolLookup(O=list(src='yahoo', name="1256.TW"))
library(quantmod)
setSymbolLookup(O=list(src='yahoo', name="1256.TW"))
getSymbols(O["2014-06::2014-12"], theme="white")
getSymbols(O)
setSymbolLookup(OT=list(src='yahoo', name="1256.TW"))
getSymbols("OT")
chartSeries(["2014-06::2014-12"], theme="white")
chartSeries(OT["2014-06::2014-12"], theme="white")
?getSymbols
setSymbolLookup(OT=list(src='google', name="1256.TW"))
getSymbols("OT")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinorm(4601, size=1, prob=0.5)
trainIndicator = rbinom(4601, size=1, prob=0.5)
?rbinom
trainIndicator
table(trainIndicator)
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(tr$type)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) -1
costFunction = function(x, y) sum(x != (y>0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family="binomial", data=trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
cvError
?reformulate
names(trainSpam)[1]
reformulate(names(trainSpam)[1], response = "numType")
?glm
glmFit = glm(lmFormula, family="binomial", data=trainSpam)
lmFormula = reformulate(names(trainSpam)[1], response = "numType")
glmFit = glm(lmFormula, family="binomial", data=trainSpam)
glmFit
?cv.glm
cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionModel
?predict
predictionTest = predict(predictionModel, testSpam)
predictionTest
View(testSpam)
dim(testSpam)[1]
dim(testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
(61 + 458)/(1346 + 458 + 61 + 449)
?read.csv
source('C:/Users/bradyhsu.PHALANX/RepData_PeerAssessment1/RepData.R')
source('C:/Users/bradyhsu.PHALANX/RepData_PeerAssessment1/RepData.R')
View(activitydata)
source('C:/Users/bradyhsu.PHALANX/RepData_PeerAssessment1/RepData.R')
install.packages("knitr")
